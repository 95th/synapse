extern crate clap;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate reqwest;

use clap::{App, Arg, SubCommand};

fn main() {
    let matches = App::new("sycli")
        .about("cli interface for synapse")
        .author(env!("CARGO_PKG_AUTHORS"))
        .version(env!("CARGO_PKG_VERSION"))
        .arg(Arg::with_name("server")
             .help("Address of synapse to connect to.")
             .short("s")
             .long("server")
             .default_value("localhost:8412"))
        .arg(Arg::with_name("password")
             .help("Password to use when connecting to synapse.")
             .short("p")
             .long("password"))
        .subcommand(SubCommand::with_name("add")
                    .about("Adds torrents to synapse.")
                    .arg(Arg::with_name("directory")
                         .help("Custom directory to download the torrent to.")
                         .short("d")
                         .long("directory"))
                    .arg(Arg::with_name("file(s)")
                         .help("Torrent files to add")
                         .multiple(true)
                         .short("f")
                         .long("files")
                         .index(1))
                    )
        .subcommand(SubCommand::with_name("del")
                    .about("Deletes torrents from synapse.")
                    .arg(Arg::with_name("torrent(s)")
                         .help("Names of torrents to delete. A fuzzy match will be attempted and ambiguities displayed.")
                         .multiple(true)
                         .short("n")
                         .long("names")
                         .index(1))
                    )
        .subcommand(SubCommand::with_name("list")
                    .about("Lists torrents in synapse.")
                    .arg(Arg::with_name("active")
                         .help("Only display non idle and pending torrents.")
                         .short("a")
                         .long("active"))
                    )
        .subcommand(SubCommand::with_name("rate")
                    .about("Rate limits synapse.")
                    .arg(Arg::with_name("up")
                         .help("Global upload rate.")
                         .short("u")
                         .long("upload")
                         .index(1))
                    .arg(Arg::with_name("down")
                         .help("Global download rate.")
                         .short("d")
                         .long("download")
                         .index(2))
                    )
        .subcommand(SubCommand::with_name("start")
                    .about("Starts torrents in synapse.")
                    .arg(Arg::with_name("torrent(s)")
                         .help("Names of torrents to start. A fuzzy match will be attempted and ambiguities displayed.")
                         .multiple(true)
                         .short("n")
                         .long("names")
                         .index(1))
                    )
        .subcommand(SubCommand::with_name("stop")
                    .about("Stops torrents in synapse.")
                    .arg(Arg::with_name("torrent(s)")
                         .help("Names of torrents to stop. A fuzzy match will be attempted and ambiguities displayed.")
                         .multiple(true)
                         .short("n")
                         .long("names")
                         .index(1))
                    )
        .get_matches();
}
